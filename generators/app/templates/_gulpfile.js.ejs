// generated on <%= date %> using <%= name %> <%= version %>


const $ = require('gulp-load-plugins')({ pattern: ['gulp-*'] });

const pkg = require('./package.json');

const gulp                      = require('gulp'),
      fs                        = require('fs'),
      through2                  = require('through2'),
      log                       = require('fancy-log'),
      path                      = require('path'),
      del                       = require('del'),
      webpack                   = require('webpack'),
      webpackStream             = require('webpack-stream'),
      browserSync               = require('browser-sync').create(),
      critical                  = require('critical'),
      PromisePool               = require('es6-promise-pool'),

      // temporary folder
      temp_folder               = '.tmp',

      // Paths to source of assets
      src_folder                = pkg.paths.srcFolder,
      src_asset_scss            = path.join(src_folder, '/scss/**/*.scss'),
      src_asset_js              = path.join(src_folder, '/js/**/*.js'),
      src_asset_img             = path.join(src_folder, '/images/**/*.+(png|jpg|jpeg|gif|svg|ico)'),
      src_asset_font            = path.join(src_folder, '/fonts/**/*.{eot,svg,ttf,woff,woff2}'),
      <%_ if (projectType === 'html') { -%>
      src_asset_html            = path.join(src_folder, '/**/*.html'),
      <%_ } -%>
      // Add any other assets that just need to be copied over to dist folder
      src_generic_assets        = [],

      // Paths you want to output assets to
      dist_folder               = pkg.paths.distFolder, // change to whatever root you want it to be.
      dist_css                  = path.join(dist_folder, '/css'),
      dist_js                   = path.join(dist_folder, '/js'),
      dist_img                  = path.join(dist_folder, '/images'),
      dist_font                 = path.join(dist_folder, '/fonts'),
      dist_html                 = path.join(dist_folder, '/**/*.{twig,html}'),

      critical_css              = pkg.paths.criticalCss;

const isProd = process.env.NODE_ENV === 'production';

//for busting cache in serviceworker through version
function makeid() {
  return Math.random().toString(36).substr(2, 9);
}

const dist_generic_assets = [];

src_generic_assets.forEach((el) => {
  dist_generic_assets.push(el.replace(src_folder, dist_folder));
});

// Clean generated assets
function clean() {

  <%_ if (projectType === 'html') { -%>
  const files_to_clean = [dist_css, dist_js, dist_img, dist_font, temp_folder].concat(dist_generic_assets);
  <%_ } else { -%>
  const files_to_clean = [ dist_folder, temp_folder ];
  <%_ } -%>

  log.warn('\x1b[33mStarting from fresh and deleting:\n', '\x1b[0m', files_to_clean.join('\n'));

  return del(files_to_clean);
};

gulp.task('generic-assets', (done) => {
  if(src_generic_assets.length > 0) {
    gulp.src(src_generic_assets, {
      allowEmpty: true,
    })
      .pipe(gulp.dest(dist_folder))
      .pipe(browserSync.stream())
  }
  done();
});

gulp.task('images', () => {
  return gulp.src(src_asset_img, { since: gulp.lastRun('images') })
    .pipe($.plumber())
    .pipe($.imagemin({
      progressive: true,
      interlaced: true,

      // don't remove IDs from SVGs, they are often used
      // as hooks for embedding and styling
      svgoPlugins: [{cleanupIDs: false}],
      verbose: true
    }))
    .pipe($.size({showFiles: true}))
    .pipe(gulp.dest(dist_img))
    .pipe(browserSync.stream());
});

function fonts(cb) {
  gulp.src(src_asset_font, {since: gulp.lastRun('fonts')})
    .pipe(gulp.dest(dist_font));

  cb();
}

<%_ if (projectType === 'html') { -%>
gulp.task('html', () => {
  return gulp.src(src_asset_html, {
      base: src_folder,
      since: gulp.lastRun('html')
    })
    .pipe(gulp.dest(dist_folder));
});
<%_ } -%>

gulp.task('inject-css-js', () => {
  const sources = gulp.src([path.join(dist_css, '**/*.css'), path.join(dist_js, '**/*.js')], {read: false});

  return gulp.src(dist_html)
    .pipe($.inject(sources, {
      ignorePath: dist_folder
    }))
    .pipe(gulp.dest(dist_folder))
    .pipe(browserSync.stream());
});
<%_ if (includeTailwind) { -%>

gulp.task('export-tailwind-config', () => {
  return gulp
      .src('./tailwind.config.js')
      .pipe($.tailwindcssExportConfig({
          output: '_tailwind.config.scss',
          format: 'scss',
          quotedKeys: true,
      }))
      .pipe(gulp.dest(path.join(src_folder, '/scss/.tmp/imports')));
});
<%_ } -%>

gulp.task('postcss', (cb) => {
  const f = $.filter(['.tmp/css/**/*.css'], {restore: true});

  gulp.src(['.tmp/css/**/*.*'])
    .pipe(f)
    .pipe($.if(!isProd, $.sourcemaps.init({loadMaps: true})))
    .pipe($.plumber())
    .pipe($.postcss([
          <%_ if (includeTailwind) { -%>
          require('tailwindcss'),
          <%_ } -%>
          require('autoprefixer'),
          isProd ? require('cssnano')({ preset: 'default' }) : false
        ].filter(Boolean)))
    .pipe($.if(!isProd, $.sourcemaps.write()))
    .pipe(f.restore)
    .pipe($.if(isProd, $.rename({ suffix: '.min' })))
    .pipe($.size({showFiles: true}))
    .pipe(gulp.dest(dist_css))
    .pipe(browserSync.stream());

  cb();
});

gulp.task('sass', gulp.series(<%_ if (includeTailwind) { -%>'export-tailwind-config', <%_ } -%>() => {
  return gulp.src(src_asset_scss)
    .pipe($.if(!isProd, $.sourcemaps.init()))
      .pipe($.plumber())
      .pipe($.dependents())
      .pipe($.sass().on('error', $.sass.logError))
    .pipe($.if(!isProd, $.sourcemaps.write()))
    .pipe(gulp.dest('.tmp/css'))
    .pipe(browserSync.stream());
}, 'postcss'));

// Lint JavaScript
gulp.task('lint', () => {
  return gulp.src(src_asset_js, { since: gulp.lastRun('lint') })
    .pipe($.eslint())
    .pipe($.eslint.format())
    .pipe($.if(!browserSync.active, $.eslint.failAfterError()))
});

gulp.task('js', gulp.series('lint', () => {
  return gulp.src(src_asset_js, { since: gulp.lastRun('js') })
    .pipe($.plumber())
    .pipe(webpackStream({
      mode: isProd ? 'production' : 'development',
      entry: {
        main: path.join(__dirname, src_folder, '/js/main.js'),
      },
      output: {
        filename: isProd ? '[name].min.js' : '[name].js'
      },
      devtool: isProd ? false : 'cheap-source-map',
      module: {
        rules: [
          { 
            test: /\.js$/, 
            exclude: /(node_modules|bower_components)/,
            use: {
              loader: 'babel-loader',
              options: {
                presets: ['@babel/preset-env']
              }
            }
          }<%_ if (includeJQuery || includeBootstrap) { -%>,
          {
            // expose jquery for use outside webpack
            test: require.resolve('jquery'),
            use: [{
              loader: 'expose-loader',
              options: 'jQuery'
            },{
              loader: 'expose-loader',
              options: '$'
            }]
          }
          <%_ } -%>
        ]
      }
    }, webpack ))
    .pipe(gulp.dest(dist_js))
    .pipe(browserSync.stream());
}));

// service worker compile and copy
gulp.task('service-worker', function () {
  return gulp.src(path.join(src_folder, 'sw.js'))
    .pipe($.replace(/@@pwa-version@@/gm, 'version-' + makeid()))
    .pipe($.if(isProd, $.replace(/styles\.css/g, 'styles.min.css')))
    .pipe($.if(isProd, $.replace(/main\.js/g, 'main.min.js')))
    .pipe(gulp.dest(dist_folder))
});


// Generate the icons. This task takes a few seconds to complete.
// You should run it at least once to create the icons. Then,
// you should run it whenever RealFaviconGenerator updates its
// package (see the check-for-favicon-update task below).

// File where the favicon markups are stored
const favicon = path.join(src_folder, 'favicon260x260.png');
const FAVICON_DATA_FILE = path.join(__dirname, 'faviconData.json');
const theme_color = pkg.favicon.themeColor;
const favicon_bg = pkg.favicon.backgroundColor;

gulp.task('generate-favicon', function(done) {
  $.realFavicon.generateFavicon({
    masterPicture: favicon,
    dest: dist_folder,
    iconsPath: '/',
    design: {
      ios: {
        pictureAspect: 'noChange',
        assets: {
          ios6AndPriorIcons: false,
          ios7AndLaterIcons: false,
          precomposedIcons: false,
          declareOnlyDefaultIcon: true
        }
      },
      desktopBrowser: {
        design: 'raw'
      },
      windows: {
        pictureAspect: 'noChange',
        backgroundColor: favicon_bg,
        onConflict: 'override',
        assets: {
          windows80Ie10Tile: false,
          windows10Ie11EdgeTiles: {
            small: false,
            medium: true,
            big: false,
            rectangle: false
          }
        }
      },
      androidChrome: {
        pictureAspect: 'noChange',
        themeColor: theme_color,
        manifest: {
          name: '<%= appname %>',
          startUrl: '/',
          display: 'standalone',
          orientation: 'notSet',
          onConflict: 'override',
          declared: true
        },
        assets: {
          legacyIcon: false,
          lowResolutionIcons: false
        }
      }
    },
    settings: {
      scalingAlgorithm: 'Mitchell',
      errorOnImageTooSmall: false,
      readmeFile: false,
      htmlCodeFile: true,
      usePathAsIs: false
    },
    markupFile: FAVICON_DATA_FILE
  }, function() {
    // Patch the original manifest
    done();
  });
});

// Inject the favicon markups in your HTML pages. You should run
// this task whenever you modify a page. You can keep this task
// as is or refactor your existing HTML pipeline.
gulp.task('inject-favicon-markups', function() {
  return gulp.src(dist_html)
    .pipe($.realFavicon.injectFaviconMarkups(JSON.parse(fs.readFileSync(FAVICON_DATA_FILE)).favicon.html_code))
    .pipe(gulp.dest(dist_folder));
});

// Check for updates on RealFaviconGenerator (think: Apple has just
// released a new Touch icon along with the latest version of iOS).
// Run this task from time to time. Ideally, make it part of your
// continuous integration system.
gulp.task('check-for-favicon-update', function(done) {
  var currentVersion = JSON.parse(fs.readFileSync(FAVICON_DATA_FILE)).version;
  $.realFavicon.checkForUpdates(currentVersion, function(err) {
    if (err) {
      throw err;
    }
  });

  done();
});

gulp.task('browser-sync', (done) => {
  browserSync.init({
    <%_ if (projectType === 'html') { -%>
    server: {
      baseDir: [ dist_folder ]
    },
    <%_ } else if (projectType === 'craft' || projectType === 'bedrock')  { -%>
    proxy: '<%= siteUrl %>',
    <%_ } -%>
    port: 3000,
    open: true,
    snippetOptions: {
      <%_ if (projectType === 'html') { -%>
      rule: {
        match: /<head[^>]*>/i,
        fn: function(snippet, match) {
          return match + snippet;
        }
      }
      <%_ } else if (projectType === 'craft' || projectType === 'bedrock') { -%>
      rule: {
          match: /<\/body>/i,
          fn: function (snippet, match) {
              return snippet + match;
          }
      }
      <%_ } -%>
    }
  });

  done();
});

gulp.task('watch', (done) => {
  
  const watchVendor = [];

  log('-> Watching files in /src folder...')

  <%_ if (projectType === 'html') { -%>
  gulp.watch(src_asset_html, gulp.series('html', 'sass', 'inject-css-js')).on('done', browserSync.reload);
  <%_ } -%>
  <%_ if (includeTailwind) { -%>
  gulp.watch('tailwind.config.js', gulp.series('postcss')).on('done', browserSync.reload);
  <%_ } -%>
  gulp.watch(src_asset_scss, gulp.series('sass'));
  gulp.watch(src_asset_js, gulp.series('js'));
  gulp.watch(src_asset_img, gulp.series('images')).on('change', browserSync.reload);
  gulp.watch(src_asset_font, gulp.series('fonts')).on('change', browserSync.reload);

  <%_ if (projectType === 'craft' || projectType === 'bedrock') { -%>
  gulp.watch(pkg.paths.templatesFolder).on('change', browserSync.reload);
  <%_ } -%>

  done();
});

<%_ if (projectType === 'html') { -%>
gulp.task('build', gulp.series(clean, gulp.parallel('generic-assets', 'html', 'service-worker', 'images', fonts, 'sass', 'js', 'generate-favicon'), 'inject-css-js'));

gulp.task('serve', gulp.series(clean, gulp.parallel('generic-assets', 'html', 'images', fonts, 'sass', 'js'), 'inject-css-js', gulp.parallel('browser-sync', 'watch')));
<%_ } else { -%>
gulp.task('build', gulp.series(clean, gulp.parallel('generic-assets', 'service-worker', 'images', fonts, 'sass', 'js', 'generate-favicon'), 'inject-css-js'));

gulp.task('serve', gulp.series(clean, gulp.parallel('generic-assets', 'images', fonts, 'sass', 'js'), 'inject-css-js', gulp.parallel('browser-sync', 'watch')));
<%_ } -%>

// Pages to generate critical css from
const criticalPages = pkg.paths.criticalPages;

// Generate critical css based on path to pages
gulp.task('critical', gulp.series('build', function (cb) {

  // constructing array out of list-object returned by config.yaml so I can pop each item.
  var pages = Object.keys(criticalPages).map(function (val) {
    return { key: val, url: criticalPages[val] };
  });

  // Modified example code from promiseProducer docs
  var promiseProducer = function () {
    const page = pages.pop();
    if (!page) {
      return null;
    }

    // critical.generate returns a Promise.
    return critical.generate({
      base: dist_folder,
      src: page.url,
      css: isProd ? path.join(dist_css, 'styles.min.css') : path.join(dist_css, 'styles.css'),
      styleTarget: path.join(critical_css, page.key + '.css'),
      minify: true,
      dimension: [{
          // iPhone 6
          width: 375,
          height: 667
        }, {
          // iPhone 6+
          width: 414,
          height: 736
        }, {
          width: 1920,
          height: 1080
        }],
      ignore: ['@font-face']
    })
  }

  // The number of promises to process simultaneously.
  var concurrency = 3

  var pool = new PromisePool(promiseProducer, concurrency)

  var poolPromise = pool.start();

  poolPromise.then(function () {
    console.log('All critical css files generated');
    cb();
  }, function (error) {
    console.log('Failed to generate all/some critical css files: ' + error.message)
  })

}));

gulp.task('default', gulp.series('build'));

exports.fonts = fonts;
exports.clean = clean;

